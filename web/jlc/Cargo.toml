# You must change these to your own details.
[package]
name = "jlc"
description = "Compile and evaluate logic"
version = "0.1.2"
authors = ["Patrick Amrein <amrein@ubique.ch>"]
categories = ["wasm"]
readme = "README.md"
edition = "2018"
wasm-opt = false

[lib]
crate-type = ["cdylib"]

[profile.release]
# This makes the compiled code faster and smaller, but it makes compiling slower,
# so it's only enabled in release mode.
lto = true
[package.metadata.wasm-pack.profile.release]
wasm-opt = false
[features]
# If you uncomment this line, it will enable `wee_alloc`:
#default = ["wee_alloc"]

[dependencies]
# The `wasm-bindgen` crate provides the bare minimum functionality needed
# to interact with JavaScript.
wasm-bindgen = "0.2.45"

jlc = { version = "*", path = "../../" }
# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. However, it is slower than the default
# allocator, so it's not enabled by default.
wee_alloc = { version = "0.4.2", optional = true }
jsonlogic = { version = "0.5.4", git = "https://github.com/ubamrein/jsonlogic_rs.git" }
serde_json = "1.0.64"
qrcode = "0.12.0"
image = "0.23.14"
bardecoder = "0.3.0"
base64 = "0.13.0"
flate2 = { version = "1.0.20", default-features = false, features = [
    "rust_backend",
] }
log = "0.4.14"

# The `web-sys` crate allows you to interact with the various browser APIs,
# like the DOM.
[dependencies.web-sys]
version = "0.3.22"
features = ["console"]

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so it's only enabled
# in debug mode.
[target."cfg(debug_assertions)".dependencies]
console_error_panic_hook = "0.1.5"

# These crates are used for running unit tests.
[dev-dependencies]
wasm-bindgen-test = "0.2.45"
futures = "0.1.27"
js-sys = "0.3.22"
wasm-bindgen-futures = "0.3.22"
